{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport { createSelector } from 'reselect';\nexport var postState = function postState() {\n  return function (state) {\n    return state.posts;\n  };\n};\nexport var selectAllPosts = function selectAllPosts() {\n  return createSelector(postState(), function (state) {\n    return state.posts;\n  });\n};\nexport var selectSelectedPostComments = function selectSelectedPostComments() {\n  return createSelector(postState(), function (state) {\n    var selectedPostId = state.selectedPostId;\n    var allComments = state.comments;\n\n    if (selectedPostId) {\n      var foundComments = allComments.filter(function (_ref) {\n        var postId = _ref.postId;\n        return postId === selectedPostId;\n      });\n      return foundComments ? foundComments : [];\n    }\n\n    return [];\n  });\n};\nexport var selectSelectedPostId = function selectSelectedPostId() {\n  return createSelector(postState(), function (state) {\n    return state.selectedPostId;\n  });\n};\nexport var selectSelectedPost = function selectSelectedPost() {\n  return createSelector(postState(), function (state) {\n    var selectedPostId = state.selectedPostId;\n\n    if (selectedPostId) {\n      var foundPost = state.posts.find(function (_ref2) {\n        var id = _ref2.id;\n        return id === selectedPostId;\n      });\n      return foundPost ? foundPost : null;\n    }\n\n    return null;\n  });\n}; //#region Doables\n\n/**\r\n * Returns true if the evaluation of a booleanable state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\n\nexport var selectPostsBooleanState = function selectPostsBooleanState(key) {\n  return createSelector(postState(), function (_ref3) {\n    var booleanable = _ref3.booleanable;\n    return _Array$isArray(key) ? !!key.filter(function (k) {\n      return booleanable[k];\n    }).length : booleanable[key];\n  });\n};\n/**\r\n * Returns the errable state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\n\nexport var selectPostsErrableState = function selectPostsErrableState(key) {\n  return createSelector(postState(), function (_ref4) {\n    var errable = _ref4.errable;\n    return _Array$isArray(key) ? !!key.filter(function (k) {\n      return errable[k];\n    }).length : errable[key];\n  });\n};\n/**\r\n * Returns the successible state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\n\nexport var selectPostsSuccessiblebleState = function selectPostsSuccessiblebleState(key) {\n  return createSelector(postState(), function (_ref5) {\n    var successible = _ref5.successible;\n    return _Array$isArray(key) ? !!key.filter(function (k) {\n      return successible[k];\n    }).length : successible[key];\n  });\n}; //#endregion","map":{"version":3,"sources":["D:/SolutionReactJs/testRXJS/demo-rx/redux-store/posts/selectors.ts"],"names":["createSelector","postState","state","posts","selectAllPosts","selectSelectedPostComments","selectedPostId","allComments","comments","foundComments","filter","postId","selectSelectedPostId","selectSelectedPost","foundPost","find","id","selectPostsBooleanState","key","booleanable","k","length","selectPostsErrableState","errable","selectPostsSuccessiblebleState","successible"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\r\nimport { IStoreState } from '../storeState';\r\nimport { PostsErrable, PostsSuccessible, PostsBooleanable } from './state';\r\n\r\nexport const postState = () => (state: IStoreState) => state.posts;\r\n\r\nexport const selectAllPosts = () =>\r\n  createSelector(\r\n    postState(),\r\n    state => state.posts\r\n  );\r\n\r\nexport const selectSelectedPostComments = () =>\r\n  createSelector(\r\n    postState(),\r\n    state => {\r\n      const selectedPostId = state.selectedPostId;\r\n      const allComments = state.comments;\r\n\r\n      if (selectedPostId) {\r\n        const foundComments = allComments.filter(({ postId }) => postId === selectedPostId);\r\n\r\n        return foundComments ? foundComments : [];\r\n      }\r\n\r\n      return [];\r\n    }\r\n  );\r\n\r\nexport const selectSelectedPostId = () =>\r\n  createSelector(\r\n    postState(),\r\n    state => state.selectedPostId\r\n  );\r\n\r\nexport const selectSelectedPost = () =>\r\n  createSelector(\r\n    postState(),\r\n    state => {\r\n      const selectedPostId = state.selectedPostId;\r\n\r\n      if (selectedPostId) {\r\n        const foundPost = state.posts.find(({ id }) => id === selectedPostId);\r\n\r\n        return foundPost ? foundPost : null;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  );\r\n\r\n//#region Doables\r\n/**\r\n * Returns true if the evaluation of a booleanable state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\r\nexport const selectPostsBooleanState = (key: PostsBooleanable | PostsBooleanable[]) =>\r\n  createSelector(\r\n    postState(),\r\n    ({ booleanable }) => (Array.isArray(key) ? !!key.filter(k => booleanable[k]).length : booleanable[key])\r\n  );\r\n\r\n/**\r\n * Returns the errable state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\r\nexport const selectPostsErrableState = (key: PostsErrable | PostsErrable[]) =>\r\n  createSelector(\r\n    postState(),\r\n    ({ errable }) => (Array.isArray(key) ? !!key.filter(k => errable[k]).length : errable[key])\r\n  );\r\n\r\n/**\r\n * Returns the successible state of a given key(s) is true\r\n * @param key the key to compare to\r\n */\r\nexport const selectPostsSuccessiblebleState = (key: PostsSuccessible | PostsSuccessible[]) =>\r\n  createSelector(\r\n    postState(),\r\n    ({ successible }) => (Array.isArray(key) ? !!key.filter(k => successible[k]).length : successible[key])\r\n  );\r\n//#endregion\r\n"]},"metadata":{},"sourceType":"module"}