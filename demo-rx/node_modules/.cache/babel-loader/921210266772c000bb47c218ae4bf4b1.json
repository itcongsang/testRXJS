{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from \"./rootReducer\";\nimport allSagas from \"./rootSaga\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web and AsyncStorage for react-native\n// import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nvar sagaMiddleware = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middlewares) {\n  if (process.env.NODE_ENV !== 'production') {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middlewares)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middlewares));\n};\n\nexport function configureStore() {\n  var middlewares = [sagaMiddleware];\n  var persistConfig = {\n    key: 'root',\n    storage: storage,\n    blacklist: []\n  };\n  var persistedReducer = persistReducer(persistConfig, rootReducer);\n  var store = createStore(persistedReducer, bindMiddleware(middlewares));\n  var persistor = persistStore(store);\n  allSagas.forEach(function (saga) {\n    sagaMiddleware.run(saga);\n  });\n  return {\n    store: store,\n    persistor: persistor\n  };\n}","map":{"version":3,"sources":["D:/SolutionReactJs/testRXJS/demo-rx/redux-store/createStore.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","rootReducer","allSagas","persistStore","persistReducer","storage","sagaMiddleware","bindMiddleware","middlewares","process","env","NODE_ENV","require","composeWithDevTools","configureStore","persistConfig","key","blacklist","persistedReducer","store","persistor","forEach","saga","run"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAAyD,OAAzD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAiD;AACjD;;AAEA,IAAMC,cAAc,GAAGN,oBAAoB,EAA3C;;AAEA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAA+B;AACpD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACd,eAAe,MAAf,4BAAmBS,WAAnB,EAAD,CAA1B;AACD;;AACD,SAAOT,eAAe,MAAf,4BAAmBS,WAAnB,EAAP;AACD,CAND;;AAQA,OAAO,SAASM,cAAT,GAA0B;AAC/B,MAAMN,WAAyB,GAAG,CAACF,cAAD,CAAlC;AAEA,MAAMS,aAAa,GAAG;AACpBC,IAAAA,GAAG,EAAE,MADe;AAEpBX,IAAAA,OAAO,EAAPA,OAFoB;AAGpBY,IAAAA,SAAS,EAAE;AAHS,GAAtB;AAMA,MAAMC,gBAAgB,GAAGd,cAAc,CAACW,aAAD,EAAgBd,WAAhB,CAAvC;AAEA,MAAMkB,KAAK,GAAGrB,WAAW,CAACoB,gBAAD,EAAmBX,cAAc,CAACC,WAAD,CAAjC,CAAzB;AAEA,MAAMY,SAAS,GAAGjB,YAAY,CAACgB,KAAD,CAA9B;AAEAjB,EAAAA,QAAQ,CAACmB,OAAT,CAAiB,UAAAC,IAAI,EAAI;AACvBhB,IAAAA,cAAc,CAACiB,GAAf,CAAmBD,IAAnB;AACD,GAFD;AAIA,SAAO;AAAEH,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,SAAS,EAATA;AAAT,GAAP;AACD","sourcesContent":["import { createStore, applyMiddleware, Middleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './rootReducer';\r\nimport allSagas from './rootSaga';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web and AsyncStorage for react-native\r\n// import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst bindMiddleware = (middlewares: Middleware[]) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension');\r\n    return composeWithDevTools(applyMiddleware(...middlewares));\r\n  }\r\n  return applyMiddleware(...middlewares);\r\n};\r\n\r\nexport function configureStore() {\r\n  const middlewares: Middleware[] = [sagaMiddleware];\r\n\r\n  const persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    blacklist: [],\r\n  };\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n  const store = createStore(persistedReducer, bindMiddleware(middlewares));\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  allSagas.forEach(saga => {\r\n    sagaMiddleware.run(saga);\r\n  });\r\n\r\n  return { store, persistor };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}