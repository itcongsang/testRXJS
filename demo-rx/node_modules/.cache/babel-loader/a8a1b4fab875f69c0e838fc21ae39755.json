{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport { FETCH_POSTS, FETCH_POSTS_SUCCESS, FETCH_POSTS_ERROR, FETCH_POST_COMMENTS, FETCH_POST_COMMENTS_SUCESS, FETCH_POST_COMMENTS_ERROR, TOGGLE_POSTS_BOOLEANABLE_STATE, TOGGLE_POSTS_ERRABLE_STATE, TOGGLE_POSTS_SUCCESSIBLE_STATE, RESET_POSTS_DOABLES } from \"./constants\";\nexport var fetchPosts = createAction(FETCH_POSTS, function () {\n  return {\n    booleanable: {\n      isFetchingPosts: true\n    },\n    errable: {\n      fetchPostsErrorMsg: null\n    },\n    successible: {\n      fetchPostsSuccessMsg: null\n    } // Not always necessary. Just for demonstration on how to use it\n\n  };\n});\nexport var fetchPostsSuccess = createAction(FETCH_POSTS_SUCCESS, function (posts) {\n  return {\n    posts: posts,\n    successible: {\n      fetchPostsSuccessMsg: 'Yay, We got the posts back!'\n    },\n    booleanable: {\n      isFetchingPosts: false\n    }\n  };\n});\nexport var fetchPostsError = createAction(FETCH_POSTS_ERROR, function (fetchPostsErrorMsg) {\n  return {\n    errable: {\n      fetchPostsErrorMsg: fetchPostsErrorMsg\n    },\n    booleanable: {\n      isFetchingPosts: false\n    }\n  };\n});\nexport var fetchPostComments = createAction(FETCH_POST_COMMENTS, function (selectedPostId) {\n  return {\n    selectedPostId: selectedPostId,\n    booleanable: {\n      isFetchingPostComments: true\n    },\n    errable: {\n      fetchPostCommentsErrorMsg: null\n    },\n    successible: {\n      fetchPostCommentsSuccessMsg: null\n    } // Not always necessary. Just for demonstration on how to use it\n\n  };\n});\nexport var fetchPostCommentsSuccess = createAction(FETCH_POST_COMMENTS_SUCESS, function (comments) {\n  return {\n    comments: comments,\n    booleanable: {\n      isFetchingPostComments: false\n    },\n    successible: {\n      fetchPostCommentsSuccessMsg: 'Yay! We got the post comments back.'\n    } // Not always necessary. Just for demonstration on how to use it\n\n  };\n});\nexport var fetchPostCommentsError = createAction(FETCH_POST_COMMENTS_ERROR, function (fetchPostCommentsErrorMsg) {\n  return {\n    errable: {\n      fetchPostCommentsErrorMsg: fetchPostCommentsErrorMsg\n    },\n    booleanable: {\n      isFetchingPostComments: false\n    }\n  };\n}); //#region  Doables\n\nexport var togglePostsBooleanableState = createAction(TOGGLE_POSTS_BOOLEANABLE_STATE, function (key) {\n  return {\n    booleanable: key\n  };\n});\nexport var togglePostsErrableState = createAction(TOGGLE_POSTS_ERRABLE_STATE, function (key) {\n  return {\n    errable: key\n  };\n});\nexport var togglePostsSuccessibleState = createAction(TOGGLE_POSTS_SUCCESSIBLE_STATE, function (key) {\n  return {\n    successible: key\n  };\n});\nexport var resetPostsDoables = createAction(RESET_POSTS_DOABLES, function () {\n  return {\n    errable: {},\n    booleanable: {},\n    successible: {}\n  };\n}); //#endregion","map":{"version":3,"sources":["D:/SolutionReactJs/testRXJS/demo-rx/redux-store/posts/actions.ts"],"names":["createAction","FETCH_POSTS","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","FETCH_POST_COMMENTS","FETCH_POST_COMMENTS_SUCESS","FETCH_POST_COMMENTS_ERROR","TOGGLE_POSTS_BOOLEANABLE_STATE","TOGGLE_POSTS_ERRABLE_STATE","TOGGLE_POSTS_SUCCESSIBLE_STATE","RESET_POSTS_DOABLES","fetchPosts","booleanable","isFetchingPosts","errable","fetchPostsErrorMsg","successible","fetchPostsSuccessMsg","fetchPostsSuccess","posts","fetchPostsError","fetchPostComments","selectedPostId","isFetchingPostComments","fetchPostCommentsErrorMsg","fetchPostCommentsSuccessMsg","fetchPostCommentsSuccess","comments","fetchPostCommentsError","togglePostsBooleanableState","key","togglePostsErrableState","togglePostsSuccessibleState","resetPostsDoables"],"mappings":"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","sourcesContent":["import { createAction, combineActions } from 'redux-actions';\r\nimport {\r\n  FETCH_POSTS,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_ERROR,\r\n  FETCH_POST_COMMENTS,\r\n  FETCH_POST_COMMENTS_SUCESS,\r\n  FETCH_POST_COMMENTS_ERROR,\r\n  TOGGLE_POSTS_BOOLEANABLE_STATE,\r\n  TOGGLE_POSTS_ERRABLE_STATE,\r\n  TOGGLE_POSTS_SUCCESSIBLE_STATE,\r\n  RESET_POSTS_DOABLES,\r\n} from './constants';\r\nimport { IPost, IComment } from 'models';\r\nimport { IPostsState, PostsBooleanable, PostsErrable, PostsSuccessible } from './state';\r\n\r\nexport const fetchPosts = createAction<IPostsState>(FETCH_POSTS, () => ({\r\n  booleanable: { isFetchingPosts: true },\r\n  errable: { fetchPostsErrorMsg: null },\r\n  successible: { fetchPostsSuccessMsg: null }, // Not always necessary. Just for demonstration on how to use it\r\n}));\r\n\r\nexport const fetchPostsSuccess = createAction<IPostsState, IPost[]>(FETCH_POSTS_SUCCESS, posts => ({\r\n  posts,\r\n  successible: { fetchPostsSuccessMsg: 'Yay, We got the posts back!' },\r\n  booleanable: { isFetchingPosts: false },\r\n}));\r\n\r\nexport const fetchPostsError = createAction<IPostsState, string>(FETCH_POSTS_ERROR, fetchPostsErrorMsg => ({\r\n  errable: { fetchPostsErrorMsg },\r\n  booleanable: { isFetchingPosts: false },\r\n}));\r\n\r\nexport const fetchPostComments = createAction<IPostsState, string>(FETCH_POST_COMMENTS, selectedPostId => ({\r\n  selectedPostId,\r\n  booleanable: { isFetchingPostComments: true },\r\n  errable: { fetchPostCommentsErrorMsg: null },\r\n  successible: { fetchPostCommentsSuccessMsg: null }, // Not always necessary. Just for demonstration on how to use it\r\n}));\r\n\r\nexport const fetchPostCommentsSuccess = createAction<IPostsState, IComment[]>(FETCH_POST_COMMENTS_SUCESS, comments => ({\r\n  comments,\r\n  booleanable: { isFetchingPostComments: false },\r\n  successible: { fetchPostCommentsSuccessMsg: 'Yay! We got the post comments back.' }, // Not always necessary. Just for demonstration on how to use it\r\n}));\r\n\r\nexport const fetchPostCommentsError = createAction<IPostsState, string>(\r\n  FETCH_POST_COMMENTS_ERROR,\r\n  fetchPostCommentsErrorMsg => ({\r\n    errable: { fetchPostCommentsErrorMsg },\r\n    booleanable: { isFetchingPostComments: false },\r\n  })\r\n);\r\n\r\n//#region  Doables\r\nexport const togglePostsBooleanableState = createAction<IPostsState, { [key in PostsBooleanable]?: boolean }>(\r\n  TOGGLE_POSTS_BOOLEANABLE_STATE,\r\n  key => ({\r\n    booleanable: key,\r\n  })\r\n);\r\n\r\nexport const togglePostsErrableState = createAction<IPostsState, { [key in PostsErrable]?: string }>(\r\n  TOGGLE_POSTS_ERRABLE_STATE,\r\n  key => ({\r\n    errable: key,\r\n  })\r\n);\r\n\r\nexport const togglePostsSuccessibleState = createAction<IPostsState, { [key in PostsSuccessible]?: string }>(\r\n  TOGGLE_POSTS_SUCCESSIBLE_STATE,\r\n  key => ({\r\n    successible: key,\r\n  })\r\n);\r\n\r\nexport const resetPostsDoables = createAction<IPostsState>(RESET_POSTS_DOABLES, () => ({\r\n  errable: {},\r\n  booleanable: {},\r\n  successible: {},\r\n}));\r\n//#endregion\r\n"]},"metadata":{},"sourceType":"module"}