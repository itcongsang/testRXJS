{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport posts from \"./posts/reducer\";\n/* new-imported-reducer-goes-here */\n\n/**\r\n * Handles the doables for a given state. Doables are `errable`, `loadable`, `successible` and `booleanable`\r\n * @param state the state\r\n * @param action the action dispatched\r\n */\nexport var reducerPayloadDoableHelper = function reducerPayloadDoableHelper(state, payload) {\n  var _ref = payload || {},\n      _ref$errable = _ref.errable,\n      errable = _ref$errable === void 0 ? {} : _ref$errable,\n      _ref$successible = _ref.successible,\n      successible = _ref$successible === void 0 ? {} : _ref$successible,\n      _ref$booleanable = _ref.booleanable,\n      booleanable = _ref$booleanable === void 0 ? {} : _ref$booleanable;\n\n  var _state$errable = state.errable,\n      currentErrable = _state$errable === void 0 ? {} : _state$errable,\n      _state$successible = state.successible,\n      currentSuccessibleble = _state$successible === void 0 ? {} : _state$successible,\n      _state$booleanable = state.booleanable,\n      currentBooleanable = _state$booleanable === void 0 ? {} : _state$booleanable;\n  return _objectSpread({}, payload, {\n    errable: _objectSpread({}, currentErrable, errable),\n    successible: _objectSpread({}, currentSuccessibleble, successible),\n    booleanable: _objectSpread({}, currentBooleanable, booleanable)\n  });\n};\nvar rootReducer = combineReducers({\n  posts: posts\n  /* new-tranformed-reducer-export-goes-here */\n\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/SolutionReactJs/testRXJS/demo-rx/redux-store/rootReducer.ts"],"names":["combineReducers","posts","reducerPayloadDoableHelper","state","payload","errable","successible","booleanable","currentErrable","currentSuccessibleble","currentBooleanable","rootReducer"],"mappings":";AAAA,SAASA,eAAT,QAAoD,OAApD;AAEA,OAAOC,KAAP;AACA;;AAIA;;;;;AAKA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCC,KADwC,EAExCC,OAFwC,EAGjB;AAAA,aACsCA,OAAO,IAAI,EADjD;AAAA,0BACfC,OADe;AAAA,MACfA,OADe,6BACL,EADK;AAAA,8BACDC,WADC;AAAA,MACDA,WADC,iCACa,EADb;AAAA,8BACiBC,WADjB;AAAA,MACiBA,WADjB,iCAC+B,EAD/B;;AAAA,uBAMnBJ,KANmB,CAGrBE,OAHqB;AAAA,MAGZG,cAHY,+BAGK,EAHL;AAAA,2BAMnBL,KANmB,CAIrBG,WAJqB;AAAA,MAIRG,qBAJQ,mCAIgB,EAJhB;AAAA,2BAMnBN,KANmB,CAKrBI,WALqB;AAAA,MAKRG,kBALQ,mCAKa,EALb;AAQvB,2BACKN,OADL;AAEEC,IAAAA,OAAO,oBAAOG,cAAP,EAA0BH,OAA1B,CAFT;AAGEC,IAAAA,WAAW,oBAAOG,qBAAP,EAAiCH,WAAjC,CAHb;AAIEC,IAAAA,WAAW,oBAAOG,kBAAP,EAA8BH,WAA9B;AAJb;AAMD,CAjBM;AAmBP,IAAMI,WAA4C,GAAGX,eAAe,CAAc;AAChFC,EAAAA,KAAK,EAALA;AACA;;AAFgF,CAAd,CAApE;AAKA,eAAeU,WAAf","sourcesContent":["import { combineReducers, Reducer, AnyAction } from 'redux';\r\nimport { IStoreState } from './storeState';\r\nimport posts from './posts/reducer';\r\n/* new-imported-reducer-goes-here */\r\n\r\ntype StateComputedTypes = IStoreState[keyof IStoreState];\r\n\r\n/**\r\n * Handles the doables for a given state. Doables are `errable`, `loadable`, `successible` and `booleanable`\r\n * @param state the state\r\n * @param action the action dispatched\r\n */\r\nexport const reducerPayloadDoableHelper = (\r\n  state: StateComputedTypes,\r\n  payload: StateComputedTypes\r\n): StateComputedTypes => {\r\n  const { errable = {}, successible = {}, booleanable = {} } = payload || {};\r\n  const {\r\n    errable: currentErrable = {},\r\n    successible: currentSuccessibleble = {},\r\n    booleanable: currentBooleanable = {},\r\n  } = state;\r\n\r\n  return {\r\n    ...payload,\r\n    errable: { ...currentErrable, ...errable },\r\n    successible: { ...currentSuccessibleble, ...successible },\r\n    booleanable: { ...currentBooleanable, ...booleanable },\r\n  } as (typeof state);\r\n};\r\n\r\nconst rootReducer: Reducer<IStoreState, AnyAction> = combineReducers<IStoreState>({\r\n  posts,\r\n  /* new-tranformed-reducer-export-goes-here */\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}