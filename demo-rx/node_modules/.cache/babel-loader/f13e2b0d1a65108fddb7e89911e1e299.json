{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchPostsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchPostCommentsSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, put, takeLatest, select } from 'redux-saga/effects';\nimport { FETCH_POSTS, FETCH_POST_COMMENTS } from \"./constants\";\nimport { fetchPostsSuccess, fetchPostsError, fetchPostCommentsSuccess, fetchPostCommentsError } from \"./actions\";\nimport { fetchAllPostsApi, fetchPostCommentsApi } from \"../../api/postsApi\";\nimport { selectSelectedPostId } from \"./selectors\";\n\nfunction fetchPostsSaga() {\n  var response, status, data;\n  return _regeneratorRuntime.wrap(function fetchPostsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(fetchAllPostsApi);\n\n        case 2:\n          response = _context.sent;\n          _context.prev = 3;\n          status = response.status, data = response.data;\n\n          if (!(status === 200)) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 8;\n          return put(fetchPostsSuccess(data));\n\n        case 8:\n          _context.next = 12;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return put(fetchPostsError('Sorry! An error occured!'));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          _context.next = 18;\n          return put(fetchPostsError('Sorry! An error occured!'));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 14]]);\n}\n\nfunction fetchPostCommentsSaga() {\n  var selectedPostId, response, status, data;\n  return _regeneratorRuntime.wrap(function fetchPostCommentsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(selectSelectedPostId());\n\n        case 2:\n          selectedPostId = _context2.sent;\n          _context2.next = 5;\n          return call(fetchPostCommentsApi, selectedPostId);\n\n        case 5:\n          response = _context2.sent;\n          _context2.prev = 6;\n          status = response.status, data = response.data;\n\n          if (!(status === 200)) {\n            _context2.next = 13;\n            break;\n          }\n\n          _context2.next = 11;\n          return put(fetchPostCommentsSuccess(data));\n\n        case 11:\n          _context2.next = 15;\n          break;\n\n        case 13:\n          _context2.next = 15;\n          return put(fetchPostCommentsError('Sorry! An error occured!'));\n\n        case 15:\n          _context2.next = 21;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](6);\n          _context2.next = 21;\n          return put(fetchPostCommentsError('Sorry! An error occured!'));\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[6, 17]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(FETCH_POSTS, fetchPostsSaga), takeLatest(FETCH_POST_COMMENTS, fetchPostCommentsSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/SolutionReactJs/testRXJS/demo-rx/redux-store/posts/sagas.ts"],"names":["fetchPostsSaga","fetchPostCommentsSaga","rootSaga","all","call","put","takeLatest","select","FETCH_POSTS","FETCH_POST_COMMENTS","fetchPostsSuccess","fetchPostsError","fetchPostCommentsSuccess","fetchPostCommentsError","fetchAllPostsApi","fetchPostCommentsApi","selectSelectedPostId","response","status","data","selectedPostId"],"mappings":";;;;yBAMUA,c;;;yBAgBAC,qB;;;yBAiBeC,Q;;AAvCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,WAAT,EAAsBC,mBAAtB;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,wBAA7C,EAAuEC,sBAAvE;AACA,SAASC,gBAAT,EAA2BC,oBAA3B;AACA,SAASC,oBAAT;;AAEA,SAAUhB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACmB,iBAAMI,IAAI,CAACU,gBAAD,CAAV;;AADnB;AACQG,UAAAA,QADR;AAAA;AAIYC,UAAAA,MAJZ,GAI6BD,QAJ7B,CAIYC,MAJZ,EAIoBC,IAJpB,GAI6BF,QAJ7B,CAIoBE,IAJpB;;AAAA,gBAMQD,MAAM,KAAK,GANnB;AAAA;AAAA;AAAA;;AAAA;AAOM,iBAAMb,GAAG,CAACK,iBAAiB,CAACS,IAAD,CAAlB,CAAT;;AAPN;AAAA;AAAA;;AAAA;AAAA;AASM,iBAAMd,GAAG,CAACM,eAAe,CAAC,0BAAD,CAAhB,CAAT;;AATN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAMN,GAAG,CAACM,eAAe,CAAC,0BAAD,CAAhB,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACyB,iBAAMM,MAAM,CAACS,oBAAoB,EAArB,CAAZ;;AADzB;AACQI,UAAAA,cADR;AAAA;AAEmB,iBAAMhB,IAAI,CAACW,oBAAD,EAAuBK,cAAvB,CAAV;;AAFnB;AAEQH,UAAAA,QAFR;AAAA;AAKYC,UAAAA,MALZ,GAK6BD,QAL7B,CAKYC,MALZ,EAKoBC,IALpB,GAK6BF,QAL7B,CAKoBE,IALpB;;AAAA,gBAOQD,MAAM,KAAK,GAPnB;AAAA;AAAA;AAAA;;AAAA;AAQM,iBAAMb,GAAG,CAACO,wBAAwB,CAACO,IAAD,CAAzB,CAAT;;AARN;AAAA;AAAA;;AAAA;AAAA;AAUM,iBAAMd,GAAG,CAACQ,sBAAsB,CAAC,0BAAD,CAAvB,CAAT;;AAVN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaI,iBAAMR,GAAG,CAACQ,sBAAsB,CAAC,0BAAD,CAAvB,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,UAAU,CAACE,WAAD,EAAcR,cAAd,CAAX,EAA0CM,UAAU,CAACG,mBAAD,EAAsBR,qBAAtB,CAApD,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { FETCH_POSTS, FETCH_POST_COMMENTS } from './constants';\r\nimport { fetchPostsSuccess, fetchPostsError, fetchPostCommentsSuccess, fetchPostCommentsError } from './actions';\r\nimport { fetchAllPostsApi, fetchPostCommentsApi } from 'api/postsApi';\r\nimport { selectSelectedPostId } from './selectors';\r\n\r\nfunction* fetchPostsSaga() {\r\n  const response = yield call(fetchAllPostsApi);\r\n\r\n  try {\r\n    const { status, data } = response;\r\n\r\n    if (status === 200) {\r\n      yield put(fetchPostsSuccess(data));\r\n    } else {\r\n      yield put(fetchPostsError('Sorry! An error occured!'));\r\n    }\r\n  } catch (error) {\r\n    yield put(fetchPostsError('Sorry! An error occured!'));\r\n  }\r\n}\r\n\r\nfunction* fetchPostCommentsSaga() {\r\n  const selectedPostId = yield select(selectSelectedPostId());\r\n  const response = yield call(fetchPostCommentsApi, selectedPostId);\r\n\r\n  try {\r\n    const { status, data } = response;\r\n\r\n    if (status === 200) {\r\n      yield put(fetchPostCommentsSuccess(data));\r\n    } else {\r\n      yield put(fetchPostCommentsError('Sorry! An error occured!'));\r\n    }\r\n  } catch (error) {\r\n    yield put(fetchPostCommentsError('Sorry! An error occured!'));\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([takeLatest(FETCH_POSTS, fetchPostsSaga), takeLatest(FETCH_POST_COMMENTS, fetchPostCommentsSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}