'use strict';

var _multimatch = require('multimatch');

var _multimatch2 = _interopRequireDefault(_multimatch);

var _lodash = require('lodash.omit');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.pick');

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PLUGIN_NAME = 'FilterChunkWebpackPlugin';

class FilterChunkWebpackPlugin {
  constructor(options = {}) {
    if (typeof options.patterns !== 'undefined' && !Array.isArray(options.patterns)) {
      throw new Error('The "patterns" option should be an array');
    }

    this.options = Object.assign({
      select: false,
      patterns: []
    }, options);
  }

  apply(compiler) {
    const filter = this.options.select === true ? _lodash4.default : _lodash2.default;

    compiler.hooks.emit.tap(PLUGIN_NAME, compilation => {
      if (this.options.patterns.length > 0) {
        const files = Object.keys(compilation.assets);
        const matchedFiles = (0, _multimatch2.default)(files, this.options.patterns);

        compilation.assets = filter(compilation.assets, matchedFiles);
      }
    });
  }
}

module.exports = FilterChunkWebpackPlugin;
